"use strict"
import { fpscounter } from './utility.js'
let canvas
let ctx
window.onload = init

function init() {
  canvas = document.getElementById('canvas')
  ctx = canvas.getContext("2d")
  canvas.width = 512
  canvas.height = 512
  canvas.tabIndex = "0"
  canvas.style.border = '1px solid #000'
  canvas.style.width = '100%'
  canvas.style.maxWidth = '90vh'
  canvas.style.background = '#99b'
  window.requestAnimationFrame(gameLoop)
}

function gameLoop(timeStamp) {
  draw()
  fpscounter(timeStamp, ctx)
  
  window.requestAnimationFrame(gameLoop)
}

function draw() {
  let image = new Image()
  image.src = './tilesets/tileset.png'
  image.onload = () => {
    let tileSize = 32
    let tileSetCols = image.width / tileSize // 512/32=16
    let tileSetRows = image.height / tileSize // 512/32=16
    //check image tile size
    if (image.width % tileSize || image.height % tileSize > 0) {
      console.log("Invalid image size!")
      return
    }

    let ground = [
      [78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78],
      [78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78],
      [78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78],
      [78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78],
      [78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78],
      [78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78],
      [78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78],
      [78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78],
      [78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78],
      [78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78],
      [78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78],
      [78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78],
      [78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78],
      [78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78],
      [78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78],
      [78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78],
    ]
    let soil = [
      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      [11, 12, 12, 12, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      [27, 28, 28, 28, 29, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      [43, 44, 126, 28, 29, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      [0, 0, 27, 28, 29, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      [0, 0, 27, 28, 29, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      [0, 0, 27, 28, 29, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      [0, 0, 27, 28, 29, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      [0, 0, 27, 28, 29, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      [0, 0, 27, 28, 29, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      [0, 0, 27, 28, 29, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      [0, 0, 27, 28, 29, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      [0, 0, 27, 28, 111, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12],
      [0, 0, 27, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28],
      [0, 0, 43, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44],
      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    ]
    let stoneBarrel = [
      [0, 238, 239, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      [0, 254, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      [0, 238, 239, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      [0, 254, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    ]

    for (let r = 0; r < tileSetRows; r++) {
      for (let c = 0; c < tileSetCols; c++) {
        let tile = ground[r][c]
        let tileRow = (tile / 16) | 0
        let tileCol = (tile % 16) | 0
        ctx.drawImage(image,tileCol * 32,  tileRow * 32, 32, 32, c * 32, r * 32, 32, 32)
        tile = soil[r][c]
        tileRow = (tile / 16) | 0
        tileCol = (tile % 16) | 0
        ctx.drawImage(image, tileCol * 32, tileRow * 32, 32, 32, c * 32, r * 32, 32, 32)
        tile = stoneBarrel[r][c]
        tileRow = (tile / 16) | 0
        tileCol = (tile % 16) | 0
        ctx.drawImage(image, tileCol * 32, tileRow * 32, 32, 32, c * 32, r * 32, 32, 32)
      }
    }
  }
}